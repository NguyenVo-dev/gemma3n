import customtkinter as ctk
from tkinter import messagebox, ttk
import threading
import queue
import time
import sys
import os

# Import c·∫£ hai lo·∫°i model
try:
    from ai.ollama_gemma_model import OllamaGemmaModel
    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False

try:
    from ai.gemma_model import GemmaModel
    HUGGINGFACE_AVAILABLE = True
except ImportError:
    HUGGINGFACE_AVAILABLE = False

class ChatWindow:
    def __init__(self):
        # Thi·∫øt l·∫≠p giao di·ªán CustomTkinter
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # T·∫°o c·ª≠a s·ªï ch√≠nh
        self.root = ctk.CTk()
        self.root.title("Gemma Chatbot - Enhanced Version")
        self.root.geometry("1000x800")
        self.root.minsize(700, 600)
        
        # Kh·ªüi t·∫°o variables
        self.ai_model = None
        self.is_model_loaded = False
        self.current_backend = "ollama"  # default
        
        # Queue ƒë·ªÉ x·ª≠ l√Ω threading
        self.response_queue = queue.Queue()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # Ki·ªÉm tra backends c√≥ s·∫µn
        self.check_available_backends()
        
    def check_available_backends(self):
        """Ki·ªÉm tra c√°c backend c√≥ s·∫µn"""
        backends = []
        
        if OLLAMA_AVAILABLE:
            backends.append("ü¶ô Ollama (Khuy·∫øn ngh·ªã)")
        
        if HUGGINGFACE_AVAILABLE:
            backends.append("ü§ó Hugging Face")
        
        if not backends:
            messagebox.showerror(
                "L·ªói", 
                "Kh√¥ng t√¨m th·∫•y backend n√†o!\nVui l√≤ng c√†i ƒë·∫∑t Ollama ho·∫∑c Hugging Face Transformers"
            )
            return
        
        # C·∫≠p nh·∫≠t dropdown
        self.backend_selector.configure(values=backends)
        self.backend_selector.set(backends[0])
        
        # T·ª± ƒë·ªông load model m·∫∑c ƒë·ªãnh
        self.load_model_async()
    
    def create_widgets(self):
        # Header frame
        header_frame = ctk.CTkFrame(self.root, height=80)
        header_frame.pack(fill="x", padx=20, pady=(20, 0))
        header_frame.pack_propagate(False)
        
        # Title v√† Backend selector
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.pack(fill="x", padx=20, pady=10)
        
        title_label = ctk.CTkLabel(
            title_frame, 
            text="ü§ñ Gemma Chatbot Enhanced", 
            font=ctk.CTkFont(size=22, weight="bold")
        )
        title_label.pack(side="left")
        
        # Backend selector
        backend_frame = ctk.CTkFrame(title_frame, fg_color="transparent")
        backend_frame.pack(side="right")
        
        ctk.CTkLabel(backend_frame, text="Backend:", font=ctk.CTkFont(size=12)).pack(side="left", padx=(0, 5))
        
        self.backend_selector = ctk.CTkComboBox(
            backend_frame,
            values=["ü¶ô Ollama", "ü§ó Hugging Face"],
            width=150,
            command=self.on_backend_changed
        )
        self.backend_selector.pack(side="left", padx=(0, 10))
        
        # Reload button
        self.reload_button = ctk.CTkButton(
            backend_frame,
            text="üîÑ Reload",
            width=60,
            command=self.reload_model
        )
        self.reload_button.pack(side="left")
        
        # Main chat frame
        chat_frame = ctk.CTkFrame(self.root)
        chat_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Chat display area
        self.chat_display = ctk.CTkTextbox(
            chat_frame, 
            width=800, 
            height=400,
            font=ctk.CTkFont(size=12),
            wrap="word"
        )
        self.chat_display.pack(fill="both", expand=True, padx=20, pady=(20, 10))
        
        # Input frame
        input_frame = ctk.CTkFrame(chat_frame)
        input_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Message input
        self.message_entry = ctk.CTkEntry(
            input_frame, 
            placeholder_text="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...",
            font=ctk.CTkFont(size=12),
            height=40
        )
        self.message_entry.pack(side="left", fill="x", expand=True, padx=(20, 10), pady=15)
        
        # Send button
        self.send_button = ctk.CTkButton(
            input_frame, 
            text="G·ª≠i", 
            command=self.send_message,
            width=80,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        self.send_button.pack(side="right", padx=(0, 10), pady=15)
        
        # Clear button
        self.clear_button = ctk.CTkButton(
            input_frame, 
            text="X√≥a", 
            command=self.clear_chat,
            width=60,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.clear_button.pack(side="right", padx=(0, 20), pady=15)
        
        # Status frame
        status_frame = ctk.CTkFrame(self.root, height=60)
        status_frame.pack(fill="x", padx=20, pady=(0, 20))
        status_frame.pack_propagate(False)
        
        # Status label
        self.status_label = ctk.CTkLabel(
            status_frame, 
            text="üîÑ ƒêang kh·ªüi t·∫°o...", 
            font=ctk.CTkFont(size=11)
        )
        self.status_label.pack(pady=15)
        
        # Progress bar
        self.progress_bar = ctk.CTkProgressBar(status_frame, width=300)
        self.progress_bar.pack(pady=(0, 10))
        self.progress_bar.set(0)
        
        # Bind Enter key
        self.message_entry.bind("<Return>", lambda e: self.send_message())
        
        # Th√™m welcome message
        self.add_message("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Gemma Chatbot Enhanced! üöÄ", "system")
        
    def on_backend_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi backend"""
        if "Ollama" in choice:
            self.current_backend = "ollama"
        else:
            self.current_backend = "huggingface"
        
        self.add_message(f"ƒêang chuy·ªÉn sang {choice}...", "system")
        self.is_model_loaded = False
        self.load_model_async()
    
    def reload_model(self):
        """Reload model"""
        self.add_message("ƒêang reload model...", "system")
        self.is_model_loaded = False
        if self.ai_model:
            self.ai_model.cleanup()
        self.load_model_async()
    
    def load_model_async(self):
        """T·∫£i model trong background thread"""
        def load_model():
            try:
                self.root.after(0, self.update_status, "üîÑ ƒêang t·∫£i model...", 0.2)
                
                # Ch·ªçn backend
                if self.current_backend == "ollama":
                    if not OLLAMA_AVAILABLE:
                        raise ImportError("Ollama kh√¥ng c√≥ s·∫µn")
                    self.ai_model = OllamaGemmaModel()
                else:
                    if not HUGGINGFACE_AVAILABLE:
                        raise ImportError("Hugging Face kh√¥ng c√≥ s·∫µn")
                    self.ai_model = GemmaModel()
                
                self.root.after(0, self.update_status, "üì• ƒêang t·∫£i model...", 0.5)
                
                # Load model
                success = self.ai_model.load_model()
                
                if success:
                    self.is_model_loaded = True
                    self.root.after(0, self.on_model_loaded)
                else:
                    self.root.after(0, self.on_model_error, "Model kh√¥ng th·ªÉ t·∫£i")
                    
            except Exception as e:
                self.root.after(0, self.on_model_error, str(e))
                
        thread = threading.Thread(target=load_model, daemon=True)
        thread.start()
    
    def update_status(self, message, progress):
        """C·∫≠p nh·∫≠t status v√† progress"""
        self.status_label.configure(text=message)
        self.progress_bar.set(progress)
        
    def on_model_loaded(self):
        """Callback khi model ƒë√£ t·∫£i xong"""
        self.status_label.configure(text="‚úÖ S·∫µn s√†ng chat!")
        self.progress_bar.set(1.0)
        
        backend_name = "Ollama" if self.current_backend == "ollama" else "Hugging Face"
        self.add_message(f"Model AI ({backend_name}) ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu chat.", "system")
        
    def on_model_error(self, error):
        """Callback khi c√≥ l·ªói t·∫£i model"""
        self.status_label.configure(text="‚ùå L·ªói t·∫£i model")
        self.progress_bar.set(0)
        
        error_msg = f"L·ªói t·∫£i model: {error}"
        self.add_message(error_msg, "system")
        
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n t√πy theo backend
        if self.current_backend == "ollama":
            self.add_message("üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Ollama:", "system")
            self.add_message("1. T·∫£i Ollama t·ª´ https://ollama.com/download", "system")
            self.add_message("2. C√†i ƒë·∫∑t v√† restart m√°y", "system")
            self.add_message("3. Ch·∫°y l·ªánh: ollama pull gemma2:2b", "system")
        else:
            self.add_message("üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Hugging Face:", "system")
            self.add_message("1. T·∫°o token t·∫°i https://huggingface.co/settings/tokens", "system")
            self.add_message("2. Request access: https://huggingface.co/google/gemma-2b-it", "system")
            self.add_message("3. Set environment variable: HF_TOKEN=your_token", "system")
        
    def send_message(self):
        """G·ª≠i tin nh·∫Øn"""
        message = self.message_entry.get().strip()
        if not message:
            return
            
        if not self.is_model_loaded:
            messagebox.showwarning("Ch·ªù ƒë·ª£i", "Model AI ch∆∞a s·∫µn s√†ng, vui l√≤ng ƒë·ª£i...")
            return
            
        # Hi·ªÉn th·ªã tin nh·∫Øn user
        self.add_message(message, "user")
        self.message_entry.delete(0, "end")
        
        # V√¥ hi·ªáu h√≥a n√∫t g·ª≠i
        self.send_button.configure(state="disabled", text="ƒêang x·ª≠ l√Ω...")
        self.status_label.configure(text="ü§î AI ƒëang suy nghƒ©...")
        self.progress_bar.set(0.3)
        
        # X·ª≠ l√Ω response trong background thread
        thread = threading.Thread(target=self.process_ai_response, args=(message,), daemon=True)
        thread.start()
        
    def process_ai_response(self, message):
        """X·ª≠ l√Ω AI response trong background thread"""
        try:
            response = self.ai_model.get_response(message)
            self.root.after(0, self.handle_ai_response, response)
        except Exception as e:
            self.root.after(0, self.handle_ai_response, f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {str(e)}")
            
    def handle_ai_response(self, response):
        """X·ª≠ l√Ω k·∫øt qu·∫£ AI response"""
        self.add_message(response, "bot")
        self.send_button.configure(state="normal", text="G·ª≠i")
        self.status_label.configure(text="‚úÖ S·∫µn s√†ng chat!")
        self.progress_bar.set(1.0)
        
    def clear_chat(self):
        """X√≥a l·ªãch s·ª≠ chat"""
        self.chat_display.delete("0.0", "end")
        self.add_message("L·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c x√≥a! üóëÔ∏è", "system")
        
    def add_message(self, message, sender):
        """Th√™m tin nh·∫Øn v√†o chat display"""
        timestamp = time.strftime("%H:%M:%S")
        
        if sender == "user":
            prefix = f"[{timestamp}] üë§ B·∫°n: "
            self.chat_display.insert("end", prefix)
            self.chat_display.insert("end", f"{message}\n\n")
        elif sender == "bot":
            prefix = f"[{timestamp}] ü§ñ AI: "
            self.chat_display.insert("end", prefix)
            self.chat_display.insert("end", f"{message}\n\n")
        elif sender == "system":
            prefix = f"[{timestamp}] üîî System: "
            self.chat_display.insert("end", prefix)
            self.chat_display.insert("end", f"{message}\n\n")
            
        # Cu·ªôn xu·ªëng cu·ªëi
        self.chat_display.see("end")
        
        # C·∫≠p nh·∫≠t display
        self.root.update_idletasks()
        
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("ƒêang tho√°t ·ª©ng d·ª•ng...")
            if self.ai_model:
                self.ai_model.cleanup()
            self.root.quit()

if __name__ == "__main__":
    app = EnhancedChatWindow()
    app.run()